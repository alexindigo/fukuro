{
  "name": "forwarded-for",
  "version": "0.0.0",
  "description": "Abstraction for retrieving ip address information from a Node.js connection. Searches for proxy headers before degrading req.address",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/primus/forwarded-for.git"
  },
  "keywords": [
    "x-forwarded-for",
    "forwarded-for",
    "ip",
    "address",
    "parser",
    "x-forwarded-proto",
    "z-forwarded-for",
    "x-real-ip"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/primus/forwarded-for/issues"
  },
  "homepage": "https://github.com/primus/forwarded-for",
  "readme": "# forwarded-for\n\nWhen you are hosting your applications behind a reverse load balancer the\nincoming requests will no longer have the IP address of your user but of the\nload balancer as it forwards the request to your node instance. Most load\nbalancers allow you to modify the headers of the request and add original\nrequest information in it.\n\nThis module makes it easier to find the correct IP address of your connection by\ndetecting these headers that load balancers set and it will gracefully fall down\nto the original `req.address` that contained the IP address of the request\ninside node.js. In addition to gracefully degrading to the original request we\nalso for other known locations of the address (which are usually set by\nframeworks such as SockJS and Socket.IO etc.)\n\n## Installation\n\nThe module is released in the npm registry:\n\n```\nnpm install --save forwarded-for\n```\n\n## Getting started\n\nLet's start out with including the module in to your application:\n\n```js\n'use strict';\n\nvar forwarded = require('forwarded-for');\n```\n\nThe `forwarded` variable will now contain the function which parses out the\nrequest information for you in to a really simple object. This object contains\nthe following properties:\n\n- `port` The remote port. It defaults to `0`.\n- `ip` The string representation of the remoteAddress. It defaults to '127.0.0.1'.\n\nWhen we fail to parse or detect an IP address we will use the default values to\nconstruct the object. To correctly parse the data the function requires the\nfollowing arguments:\n\n- `obj` The socket like object that probably contains the remoteAddress\n- `headers` A reference to the HTTP headers of the request\n- `whitelist`, _optional_ A white list of IP addresses of your load balancers so\n  people cannot make fake requests with `x-forwarded-for` headers.\n\nSo with all the information combined, it would look something like this:\n\n```js\n'use stict';\n\nvar forwarded = require('forwarded-for');\n\nrequire('http').createServer(function (req, res) {\n  var address = forwarded(req, req.headers);\n\n  res.end('Your ip address is '+ address.ip);\n}).listen(8080);\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "forwarded-for@0.0.0",
  "dist": {
    "shasum": "e553dcd619944c60077b2505c7d7dd353977a24a"
  },
  "_from": "forwarded-for@0.0.x",
  "_resolved": "https://registry.npmjs.org/forwarded-for/-/forwarded-for-0.0.0.tgz"
}
