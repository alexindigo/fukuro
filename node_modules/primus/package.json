{
  "name": "primus",
  "version": "2.0.4",
  "description": "Primus is a simple abstraction around real-time frameworks. It allows you to easily switch between different frameworks without any code changes.",
  "main": "index.js",
  "scripts": {
    "browserify": "browserify example/primus.js -o example/primus.browserify.js --standalone Primus",
    "integration": "NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name '*.integration.js')",
    "test": "NODE_ENV=testing ./node_modules/.bin/mocha $(find test -name '*.test.js')",
    "update": "find transformers -name update.sh -exec bash {} \\;"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/primus/primus.git"
  },
  "keywords": [
    "primus",
    "real-time",
    "realtime",
    "websocket",
    "ws",
    "engine.io",
    "socket.io",
    "transformer"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "dependencies": {
    "load": "1.0.x",
    "predefine": "0.0.x",
    "eventemitter3": "0.1.x",
    "forwarded-for": "0.0.x"
  },
  "devDependencies": {
    "binary-pack": "0.0.x",
    "browserchannel": "1.0.x",
    "chai": "1.7.x",
    "e-json": "0.0.x",
    "engine.io": "0.9.x",
    "engine.io-client": "0.9.0",
    "global-wrap": "1.4.x",
    "jsonh": "0.0.x",
    "mocha": "1.11.x",
    "pre-commit": "0.0.x",
    "request": "2.21.x",
    "socket.io": "0.9.x",
    "socket.io-client": "0.9.x",
    "sockjs": "0.3.x",
    "sockjs-client-node": "0.0.x",
    "ws": "0.4.x"
  },
  "readme": "# Primus\n\n[![Build Status](https://travis-ci.org/primus/primus.png?branch=master)](https://travis-ci.org/primus/primus)\n[![NPM version](https://badge.fury.io/js/primus.png)](http://badge.fury.io/js/primus)\n\nPrimus, the creator god of transformers but now also known as universal wrapper\nfor real-time frameworks. There are a lot of real-time frameworks available for\nNode.js and they all have different opinions on how real-time should be done.\nPrimus provides a common low level interface to communicate in real-time using\nvarious of real-time frameworks.\n\n### Advantages\n\n1. Effortless switching between real-time frameworks by changing one single line\n   of code. No more API rewrites needed when your project requirements change,\n   the framework get abandoned or simply breaks down.\n2. Built-in reconnect, it just works. The reconnect is controlled by a\n   randomised exponential back-off algorithm to reduce server stress.\n3. Offline detection, Primus is smart enough to detect when users drop their\n   internet connection (switching WIFI points/cell towers for example) and\n   reconnects when they are back online.\n4. Automatically encodes and decodes messages using custom parsers. Can be\n   easily switched for binary encoding for example.\n5. A clean and stream compatible interface for the client and server. You can\n   just `stream#pipe` data around. In addition to that, the client works on\n   Node.js as well, write once, run it everywhere.\n6. Fixes various of bugs in the supported frameworks and additions stability\n   patches to improve real-time communication.\n8. Comes with an amazing plugin interface to keep the core library as fast and\n   lean as possible while still allowing the server and the client to be\n   extended.\n9. Last but not least, Primus is build with love, passion and dedication to the\n   real-time web.\n\n```\nIf you have questions or need help with primus, come chat in our IRC room:\n\n   server: irc.freenode.net\n   room: #primus\n```\n\n### Installation\n\nPrimus is released in `npm` and can be installed using:\n\n```\nnpm install primus --save\n```\n\n### Table of Contents\n\n- [Introduction](#primus)\n  - [Advantages](#advantages)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n  - [Client library](#client-library)\n- [Connecting from the browser](#connecting-from-the-browser)\n- [Connecting from the server](#connecting-from-the-server)\n- [Authorization](#authorization)\n- [Broadcasting](#broadcasting)\n- [Destruction](#destruction)\n- [Events](#events)\n- [Heartbeats and latency](#heartbeats-and-latency)\n- [Supported real-time frameworks](#supported-real-time-frameworks)\n  - [Engine.IO](#engineio)\n  - [WebSockets](#websockets)\n  - [BrowserChannel](#browserchannel)\n  - [SockJS](#sockjs)\n  - [Socket.IO](#socketio)\n- [Transformer Inconsistencies](#transformer-inconsistencies)\n- [Plugins](#plugins)\n  - [Extending the Spark / Socket](#extending-the-spark--socket)\n  - [Transforming and intercepting messages](#transforming-and-intercepting-messages)\n  - [Community Plugins](#community-plugins)\n- [Example](#example)\n   - [Community](#community)\n- [FAQ](#FAQ)\n  - [Scaling](#what-is-the-best-way-to-scale-primus)\n  - [Express](#how-do-i-use-primus-with-express-3)\n  - [RequireJS](#is-requirejs-supported)\n  - [Custom headers](#can-i-send-custom-headers-to-the-server)\n- [Versioning](#versioning)\n  - [History](#history)\n  - [Convention](#convention)\n  - [Release cycle](#release-cycle)\n- [Other languages](#other-languages)\n- [License](#license)\n\n### Getting Started\n\nPrimus doesn't ship with real-time frameworks as dependencies, it assumes that\nyou as user add them yourself as a dependency. This is done to keep the module\nas lightweight as possible. This works because `require` in will walk through\nyour directories searching for `node_module` folders that have these matching\ndependencies.\n\nPrimus needs to be \"attached\" to a HTTP compatible server. These includes the\nbuilt-in `http` and `https` servers but also the `spdy` module as it has the\nsame API as node servers. Creating a new Primus instance is relatively\nstraightforward:\n\n```js\n'use strict';\n\nvar Primus = require('primus')\n  , http = require('http');\n\nvar server = http.createServer(/* request handler */)\n  , primus = new Primus(server, {/* options */});\n```\n\nThe following options can be provided:\n\nName                | Description                               | Default       \n--------------------|-------------------------------------------|---------------\nauthorization       | Authorization handler                     | `null`\npathname            | The URL namespace that Primus can own     | `/primus`\nparser              | Message encoder for all communication     | `JSON`\ntransformer         | The tranformer we should use internally   | `websockets`\nplugin              | The plugins that should be applied        | `{}`\ntimeout             | The heartbeat timeout                     | `35000`\n\nThe heartbeat timeout is used to forcefully disconnect a spark if no data is\nreceived from the client within the specified amount of time. It is possible\nto completely disable the heartbeat timeout by setting the value of the\n`timeout` option to `false`.\n\nIn addition to support different frameworks we've also made it possible to use\ncustom encoding and decoding libraries. We're using `JSON` by default but you\ncould also use `msgpack` or `JSONH` for example (but these parsers need to be\nsupported by Primus, so check out the parser folder for examples). To set parser\nyou can supply a `parser` configuration option:\n\n```js\nvar primus = new Primus(server, { parser: 'JSON' });\n```\n\nAll parsers have an `async` interface for error handling.\n\n#### Client library\n\nAs most libraries come with their own client-side framework for making the\nconnection we've also created a small wrapper for this. The library can be\nretrieved using:\n\n```js\nprimus.library();\n```\n\nWhich returns the client-side library. It's not minified as that is out of the\nscope of this project. You can store this on a CDN or on your static server. Do\nwhatever you want with it, but remember to regenerate it every time you change\nPrimus server options. This is important because some properties of the client\nare set using the server configuration. For example if you change the\n`pathname`, the client should be regenerated to reflect that change and work\ncorrectly. We advice you to regenerate the library every time you redeploy so\nyou always have a client compatible with your back-end. To save the file you\ncan use:\n\n```js\nprimus.save(__dirname +'/primus.js');\n```\n\nThis will store the compiled library in your current directory. If you want to\nsave it asynchronously, you can supply the method with a callback method:\n\n```js\nprimus.save(__dirname +'/primus.js', function save(err) {\n\n});\n```\n\nBut to make it easier for you during development we've automatically added an\nextra route to the supplied HTTP server, this will serve the library for you so\nyou don't have to save it. Please note, that this route isn't optimised for\nserving static assets and should only be used during development. In your HTML\npage add:\n\n```html\n<script src=\"/primus/primus.js\"></script>\n```\n\nAs you can see, it will use the `/primus` pathname by default. Primus needs to\nown the whole path/namespace in order to function properly as it will forward\nall other requests directly in to the transformers so they can work their magic.\nIf you already have a static folder with the name `primus` you can change the\npathname to something different and still make this work. But you would of\ncourse need to update the `src` attribute of the script tag to set the correct\nlocation. It's always available at:\n\n```\n<protocol>://<server location>/<pathname>/primus.js\n```\n\nThe client is cross domain compatible so you don't have to serve it from the\nsame domain you're running Primus on. But please note, that the real-time\nframework you're using might be tied to same domain restrictions.\n\nOnce you're all set up you can start listening for connections. These\nconnections are announced through the `connection` event.\n\n```js\nprimus.on('connection', function (spark) {\n  // spark is the new connection.\n});\n```\n\nDisconnects are announced using a `disconnection` event:\n\n```js\nprimus.on('disconnection', function (spark) {\n  // the spark that disconnected\n});\n```\n\nThe `spark` the actual real-time socket/connection. Sparks have a really low\nlevel interface and only expose a couple properties that are cross engine\nsupported. The interface is modeled towards a Node.js stream compatible\ninterface. So this will include all methods that are available on the \n[stream interface](http://nodejs.org/api/stream.html) including `Spark#pipe`.\n\n#### spark.headers\n\nThe `spark.headers` property contains contains the headers of either the request\nthat started a handshake with the server or the headers of the actual real-time\nconnection. This depends on the module you are using.\n\n*Please note that sending custom headers from the client to the server is\nimpossible as not all transports that these transformers support can add custom\nheaders to a request (JSONP for example). If you need to send custom data, use a\nquery string when connecting*\n\n#### spark.address\n\nThe `spark.address` property contains the `ip` and `port` of the\nconnection. If you're running your server behind a reverse proxy it will\nautomatically use the `x-forwarded-for` header. This way you will always have\nthe address of the connecting client and not the IP address of your proxy.\n\n*Please note that the `port` is probably out of date by the time you're going\nto read it as it's retrieved from an old request, not the request that is\nactive at the time you access this property.*\n\n#### spark.query\n\nThe `spark.query` contains the query string you used to connect to server. It's\nparsed to an object. Please note that this is not available for all supported\ntransformers, but it's proven to be to useful to not implement it because one\nsilly transformer refuses to support it. Yes, I'm looking at you SockJS.\n\n#### spark.id\n\nThis is an unique id that we use to identify this single connection with. Normally\nthe frameworks refer to this as an `sessionid` which is confusing as it's only\nused for the duration of one single connection. You should not see this as an\n\"session id\" and expect it change to between disconnects and reconnects.\n\n#### spark.write(data)\n\nYou can use the `spark.write` method to send data over the socket. The data is\nautomatically encoded for you using the `parser` that you've set while creating\nthe Primus instance. This method always returns `true` so back pressure isn't\nhandled.\n\n```js\nspark.write({ foo: 'bar' });\n```\n\n#### spark.end(data, options)\n\nYou can use `spark.end` to close the connection. This method takes two optional\narguments. The first if provided is the `data` to send to the client before\nclosing the connection. The second is an options object used to customize the\nbehavior of the method. By default the `spark.end` method closes the connection\nin a such way that the client knows it was intentional and it doesn't attempt a\nreconnection.\n\n```js\nspark.end(); // the client doesn't reconnect automatically\n```\n\nYou can change this behavior and trigger a client-side reconnection using the\n`reconnect` option.\n\n```js\nspark.end(null, { reconnect: true }); // trigger a client-side reconnection\n```\n\n#### spark.emits(event, parser)\n\nThis method is mostly used internally. It returns a function that emits assigned\n`event` every time it's called. It only emits the first received argument or the\nresult of the optional `parser` call. The `parser` function receives all\narguments and can parse it down to a single value or just extracts the useful\ninformation from the data. Please note that the data that is received here isn't\ndecoded yet.\n\n```js\nspark.emits('event', function parser(structure) {\n  return structure.data;\n});\n```\n\n#### spark.on('data')\n\nThe `data` event is emitted when a message is received from the client. It's\nautomatically decoded by the specified decoder.\n\n```js\nspark.on('data', function message(data) {\n  // the message we've received.\n});\n```\n\n#### spark.on('end')\n\nThe `end` event is emitted when the client has disconnected.\n\n```js\nprimus.on('connection', function (spark) {\n  console.log('connection has the following headers', spark.headers);\n  console.log('connection was made from', spark.address);\n  console.log('connection id', spark.id);\n\n  spark.on('data', function (data) {\n    console.log('received data from the client', data);\n\n    //\n    // Always close the connection if we didn't receive our secret imaginary\n    // handshake.\n    //\n    if ('foo' !== data.secrethandshake) spark.end();\n    spark.write({ foo: 'bar' });\n    spark.write('banana');\n  });\n\n  spark.write('Hello world');\n})\n```\n\n### Connecting from the Browser\n\nPrimus comes with its client framework which can be compiled using\n`primus.library()` as mentioned above. To create a connection you can simply\ncreate a new Primus instance:\n\n```js\nvar primus = new Primus(url, { options });\n\n//\n// But it can be easier, with some syntax sugar.\n//\nvar primus = Primus.connect(url, { options });\n```\n\nThe following options can be provided:\n\nName                | Description                             | Default       \n--------------------|-----------------------------------------|---------------\n[reconnect]         | Configures the exponential back off     | `{}`\ntimeout             | Connect time out                        | `10000` ms\nping                | Ping interval to test connection        | `25000` ms\npong                | Time the server has to respond to ping  | `10000` ms\n[strategy]          | Our reconnect strategies                | `\"disconnect,online,timeout\"`\nmanual              | Manually open the connection            | `false`\nwebsockets          | Should we AVOID the usage of WebSockets | Boolean, is detected.\nnetwork             | Use native `online`/`offline` detection | Boolean, is feature detected.\ntransport           | Transport specific configuration        | `{}`\n\nThere are 2 important options that we're going to look a bit closer at.\n\n##### Reconnect\n\nWhen the connection goes down unexpectedly a automatic reconnect process is\nstarted. It's using a randomised exponential back-off algorithm to prevent\nclients from DDoSing your server when you reboot as they will all be re-connecting at\ndifferent times. The reconnection can be configured using the `options` argument\nin `Primus` and you should add these options to the `reconnect` property:\n\nName                | Description                             | Default       \n--------------------|-----------------------------------------|---------------\nmaxDelay            | The maximum delay of a reconnect        | `Infinity`\nminDelay            | The minium delay of the reconnect       | `500`\nretries             | Amount of allowed reconnects.           | 10\n\n```js\nprimus = Primus.connect(url, {\n  reconnect: {\n      maxDelay: Infinity // Number: The max delay for a reconnect retry.\n    , minDelay: 500 // Number: The minimum delay before we reconnect.\n    , retries: 10 // Number: How many times should we attempt to reconnect.\n  }\n});\n```\n\nWhen you're going to customize `minDelay` please note that it will grow\nexponentially e.g. `500 -> 1000 -> 2000 -> 4000 -> 8000` and is randomized\nso expect to have the slightly higher or lower values.\n\nPlease note that when we reconnect, we will receive a new `connection` event on\nthe server and a new `open` event on the client, as the previous connection was\ncompletely dead and should therefore be considered as new connection.\n\nIf you are interested in learning more about the backoff algorithm you might\nwant to read http://dthain.blogspot.nl/2009/02/exponential-backoff-in-distributed.html\n\n##### Strategy\n\nThe strategy allows you to configure when you want a `reconnect` operation to\nkick in. We're providing some **sane** defaults for this but we still want to\nprovide users with highest level of customization:\n\n<dl>\n  <dt>disconnect</dt>\n  <dd>\n    Reconnect when we detect an unintential disconnect in the connection.\n  </dd>\n  <dt>online</dt>\n  <dd>\n    Reconnect when the browser went from an offline event to an online event.\n  </dd>\n  <dt>timeout</dt>\n  <dd>\n    Reconnect when we failed to establish our initial connection. This can\n    happen because we took to long to connect or because there was an error\n    while we tried to connect (which happens when you connect to a dead server)\n  </dd>\n</dl>\n\nYou can supply these options as a comma separated `String`:\n\n```js\nvar primus = new Primus(url, { strategy: 'online, timeout ,diScoNNect' })\n```\n\nOr as an `Array`:\n\n```js\nvar primus = new Primus(url, { strategy: [ 'online', 'timeout', 'diScoNNect' ]});\n```\n\nWe'll try to normalize everything as much as possible, we `toLowerCase` everything\nand join it back to a readable string.\n\n**If you are using authentication you should disable the `timeout` strategy as\nthere is no way of detecting the difference between a failed authorization and a\nfailed connect. If you leave this enabled with authorization every unauthorized\naccess will try to reconect again**.\n\nWe automatically disable this for you when you've set the authorization before\nyou save the library.\n\nBut there are always use cases where reconnection is not advised for your\napplication. In these cases we've provided a way to completely disable the\nreconnection, this is done by setting the `strategy` to `false`:\n\n```js\nvar primus = new Primus(url, { strategy: false });\n```\nIf you want to manually control the reconnection you can call `primus.end()`\nto close the connection and `primus.open()` to enstablish a new one. **Don't\ndo manual reconnection if you haven't set the strategy to false**.\n\n[reconnect]: #reconnect\n[strategy]: #strategy\n\n##### transport\n\nThe transport object allows you to add a transport specific configuration.\nWe only recommend using this if you understand and accept the following\nconsequences:\n\n- Primus will try to override configuration properties that are needed to\n  ensure a correct functioning.\n- We might start using options without any announcement or major version bump.\n- Expect your client and it's connection to malfunction once you switch between\n  different transports, as these configurations are specific to the bundled\n  transformer library/client.\n- Bugs and bug reports caused by using this functionality are closed\n  immediately.\n\nHaving that said, this gives you total freedom while still getting the benefits\nof Primus.\n\n#### primus.write(message)\n\nOnce you've created your Primus instance you're ready to go. When you want to\nwrite data to your server you can just call the `.write` method:\n\n```js\nprimus.write('message');\n```\n\nIt automatically encodes your messages using the parser that you've specified on\nthe server. So sending objects back and forth between the server is nothing\ndifferent then just writing:\n\n```js\nprimus.write({ foo: 'bar' });\n```\n\nWhen you are sending messages to the server, you don't have to wait for the\n`open` event to happen, the client will automatically buffer all the data you've\nsend and automatically write it to the server once it's connected. The client\nsupports a couple of different events.\n\n#### primus.on('data')\n\nThe `data` event is the most important event of the whole library. It's emitted\nwhen we receive data from the server. The data that is received is already\ndecoded by the specified parser.\n\n```js\nprimus.on('data', function message(data) {\n  console.log('Received a new message from the server', data);\n});\n```\n\n#### primus.on('open')\n\nThe `open` event is emitted when we've successfully created a connection with\nthe server. It will also be emitted when we've successfully reconnected when the\nconnection goes down unintentionally.\n\n```js\nprimus.on('open', function open() {\n  console.log('Connection is alive and kicking');\n});\n```\n\n#### primus.on('error')\n\nThe `error` event is emitted when something breaks that is out of our control.\nUnlike Node.js, we do not throw an error if no error event listener is\nspecified. The cause of an error could be that we've failed to encode or decode\na message or we failed to create a connection.\n\n```js\nprimus.on('error', function error(err) {\n  console.error('Something horrible has happened', err, err.message);\n});\n```\n\n#### primus.on('reconnect')\n\nThe `reconnect` event is emitted when we're attempting to reconnect to the\nserver. This all happens transparently and it's just a way for you to know when\nthese reconnects are actually happening.\n\n```js\nprimus.on('reconnect', function () {\n  console.log('Reconnect attempt started');\n});\n```\n\n### primus.on('reconnecting')\n\nLooks a lot like the `reconnect` event mentioned above, but it's emitted when\nwe've detected that connection went/is down and we're going to start a reconnect\noperation. This event would be ideal to update your application's UI when the\nconnection is down and you are trying to reconnect in x seconds.\n\n```js\nprimus.on('reconnecting', function (opts) {\n  console.log('Reconnecting in %d ms', opts.timeout);\n  console.log('This is attempt %d out of %d', opts.attempt, opts.retries);\n});\n```\n\n#### primus.on('end')\n\nThe `end` event is emitted when we've closed the connection. When this event is\nemitted you should consider your connection to be fully dead with no way of\nreconnecting. But it's also emitted when the server closes the connection.\n\n```js\nprimus.on('end', function () {\n  console.log('Connection closed');\n});\n```\n\n#### primus.end()\n\nWhen you want to close the connection you can call the `primus.end()` method.\nAfter this the connection should be considered dead and a new connection needs\nto be made using `Primus.connect(url)` or `primus = new Primus(url)` if you want\nto talk with the server again.\n\n```js\nprimus.end();\n```\n\n### Connecting from the server\n\nThe client-side library has been made compatible with Node.js so the same code\nbase can be re-used for server side connections. There are two ways of creating\na server side client.\n\n1. When you've created your `primus` instance you can access the `Socket`\n   property on it. This `Socket` is automatically configured to connect to the\n   correct pathname, using the same `transformer` and `parser` that you've\n   specified when you created your `primus` instance.\n\n   ```js\n   var primus = new Primus(server, { transformer: transformer, parser: parser })\n     , Socket = primus.Socket;\n\n   var client = new Socket('http://localhost:8080');\n   //\n   // It has the same interface as the client, so you can just socket.write or\n   // listen for the `open` events etc.\n   //\n   ```\n2. You might need to connect from a different node process where you don't have\n   access to your `primus` instance and the compatible `Socket` instance. For\n   these cases there a special `createSocket` method where you can specify the\n   `transformer`, `parser`, `plugin` that you are using on your server to create\n   another compatible socket.\n\n   ```js\n   var Socket = Primus.createSocket({ transformer: transformer, parser: parser })\n     , client = new Socket('http://localhost:8080');\n  ```\n\n  If you do not know which transformer and parser are used on the server, we\n  expose a small JSON \"spec\" file that exposes this information. The\n  specification can be reached on the `/<pathname>/spec` and will output the\n  following JSON document:\n\n  ```json\n  {\n    \"version\":\"1.0.1\",\n    \"pathname\":\"/primus\",\n    \"parser\":\"json\",\n    \"transformer\":\"websockets\"\n  }\n  ```\n\n### Authorization\n\n#### Server\n\nPrimus has a built in auth hook that allows you to leverage the basic auth\nheader to validate the connection. To setup the optional auth hook, use the\n`Primus#authorize` method:\n\n```js\nvar authParser = require('basic-auth-parser');\n\n//\n// Add hook on server\n//\nprimus.authorize(function (req, done) {\n  var auth;\n\n  try { auth = authParser(req.headers['authorization']) }\n  catch (ex) { return done(ex) }\n\n  //\n  // Do some async auth check\n  //\n  authCheck(auth, done);\n});\n\nprimus.on('connection', function (spark) {\n  //\n  // You only get here if you make it through the auth hook!\n  //\n});\n```\n\nIn this particular case, if an error is passed to `done` by `authCheck` or\nthe exception handler then the connection attempt will never make it to the\n`primus.on('connection')` handler.\n\nThe error you pass can either be a string or an object. If an object, it can\nhave the following properties which affect the response sent to the client:\n\n- `statusCode`: The HTTP status code returned to the client. Defaults to 401.\n- `authenticate`: If set and `statusCode` is 401 then a `WWW-Authenticate`\n  header is added to the response, with a value equal to the `authenticate`\n  property's value.\n- `message`: The error message returned to the client. The response body will be\n  `{error: message}`, JSON-encoded.\n\nIf the error you pass is a string then a 401 response is sent to the client\nwith no `WWW-Authenticate` header and the string as the error message.\n\nFor example to send 500 when an exception is caught, 403 for forbidden users\nand details of the basic auth scheme being used when authentication fails:\n\n```js\nprimus.authorize(function (req, done) {\n  var auth;\n\n  if (req.headers.authorization) {\n    try { auth = authParser(req.headers.authorization) }\n    catch (ex) { \n      ex.statusCode = 500;\n      return done(ex);\n    }\n\n    if ((auth.scheme === 'myscheme') &&\n        checkCredentials(auth.username, auth.password)) {\n      if (userAllowed(auth.username)) {\n        return done();\n      } else {\n        return done({ statusCode: 403, message: 'Go away!' });\n      }\n    }\n  }\n\n  done({\n    message: 'Authentication required',\n    authenticate: 'Basic realm=\"myscheme\"'\n  });\n});\n```\n\n#### Client\n\nUnfortunately, the amount of detail you get in your client when authorization\nfails depends on the transformer in use. Most real-time frameworks supported\nby Primus don't expose the status code, headers or response body.\n\nThe WebSocket transformer's underlying transport socket will fire an\n`unexpected-response` event with the HTTP request and response:\n\n```js\nclient.on('outgoing::open', function ()\n{\n  client.socket.on('unexpected-response', function (req, res)\n  {\n    console.error(res.statusCode);\n    console.error(res.headers['www-authenticate']);\n\n    // it's up to us to close the request (although it will time out)\n    req.abort();\n\n    // it's also up to us to emit an error so primus can clean up\n    socket.socket.emit('error', 'authorization failed: ' + res.statusCode);\n  });\n});\n```\n\nIf you want to read the response body then you can do something like this:\n\n```js\nclient.on('outgoing::open', function ()\n{\n  client.socket.on('unexpected-response', function (req, res)\n  {\n    console.error(res.statusCode);\n    console.error(res.headers['www-authenticate']);\n\n    var data = '';\n\n    res.on('data', function (v) {\n      data += v;\n    });\n\n    res.on('end', function () {\n      // remember error message is in the 'error' property\n      socket.socket.emit('error', new Error(obj.error));\n    });\n  });\n});\n```\n\nIf `unexpected-response` isn't caught (because the WebSocket transformer isn't\nbeing used or you don't listen for it) then you'll get an `error` event:\n\n```js\nprimus.on('error', function error(err) {\n  console.error('Something horrible has happened', err, err.message);\n});\n```\n\nAs noted above, `err` won't contain any details about the authorization failure\nso you won't be able to distinguish it from other errors.\n\n### Broadcasting\n\nBroadcasting allows you to write a message to every connected `Spark` on your server.\nThere are 2 different ways of doing broadcasting in Primus. The easiest way is to\nuse the `Primus#write` method which will write a message to every connected user:\n\n```js\nprimus.write(message);\n```\n\nThere are cases where you only want to broadcast a message to a smaller group of\nusers. To make it easier to do this, we've added a `Primus#forEach` method which\nallows you to iterate over all active connections.\n\n```js\nprimus.forEach(function (spark, id, connections) {\n  if (spark.query.foo !== 'bar') return;\n\n  spark.write('message');\n});\n```\n\n### Destruction\n\nIn rare cases you might need to destroy the Primus instance you've created. You\ncan use the `primus.destroy()` or `primus.end()` method for this. This method\naccepts an Object which allows you to configure how you want the connections to\nbe destroyed:\n\n- `close` Close the HTTP server that Primus received. Defaults to `true`.\n- `end` End all active connections. Defaults to `true`.\n- `timeout` Clean up the server and optionally, it's active connections after\n  the specified amount of timeout. Defaults to `0`.\n\nThe timeout is especially useful if you want gracefully shutdown your server but\nreally don't want to wait an infinite amount of time.\n\n```js\nprimus.destroy({ timeout: 10000 });\n```\n\n### Events\n\nPrimus is build upon the Stream and EventEmitter interfaces. This is a summary\nof the events emitted by Primus.\n\nEvent                 | Usage       | Location      | Description\n----------------------|-------------|---------------|----------------------------------------\n`outgoing::reconnect` | private     | client        | Transformer should reconnect.\n`reconnecting`        | **public**  | client        | We're scheduling a reconnect.\n`reconnect`           | **public**  | client        | Reconnect attempt is about to be made.\n`timeout`             | **public**  | client        | Failed to connect to server.\n`outgoing::open`      | private     | client/spark  | Transformer should connect.\n`incoming::open`      | private     | client/spark  | Transformer has connected.\n`open`                | **public**  | client        | Connection is open.\n`incoming::error`     | private     | client        | Transformer received error.\n`error`               | **public**  | client/spark  | An error happened.\n`incoming::data`      | private     | client/server | Transformer received data.\n`outgoing::data`      | private     | client/spark  | Transformer should write data.\n`data`                | **public**  | client/spark  | We received data.\n`incoming::end`       | private     | client/spark  | Transformer closed the connection.\n`outgoing::end`       | private     | client/spark  | Transformer should close connection.\n`end`                 | **public**  | client        | Primus has ended.\n`close`               | **public**  | client        | The underlaying connection is closed, we might retry.\n`connection`          | **public**  | server        | We received a new connection.\n`disconnection`       | **public**  | server        | A connection closed.\n`initialised`         | **public**  | server        | The server is initialised.\n`close`               | **public**  | server        | The server has been destroyed.\n`incoming::pong`      | private     | client        | We received a pong message.\n`outgoing::ping`      | private     | client        | We're sending a ping message.\n`online`              | **public**  | client        | We've regained a network connection\n`offline`             | **public**  | client        | We've lost our internet connection\n`log`                 | **public**  | server        | Log messages.\n`readyStateChange`    | **public**  | client/spark  | The readyState has changed.\n\nAs a rule of thumb assume that every event that is prefixed with `incoming::` or\n`outgoing::` is reserved for internal use only and that emitting such events your\nself will most likely result in c̮̫̞͚͉̮̙͕̳̲͉̤̗̹̮̦̪̖̱h̛͍͙̖̟͕̹͕̙̦̣̲̠̪̯̳͖̝̩a̴̝̦͇̥̠̟͚̳̤̹̗̻̭͍͖͕͓̻o̥̹̮̙͔̗͍͚͓̗̦̹͈͙͕̘̮͖̝ș̗̲̤̗̮͈̙͈̹̼̣̹̖̱̤̼̺̤ ̻͙̗̥̠̱͇̱̝̟̺͍̺̼͆̅̓̓̇a̜̖͈͇͎͙̲̙̗͇̫̘̖̹͖͓͔̺̱n̹͓̮͇̯̜̤̗͍̯̰̫̫̖̰ͬ͌ͬͫd͚̪͚̭͚̥̰̤̟͎̝̲̯̭̹̭̙̼̤ ͖̞̙̹͈͚̥̦͚͉͖̼̬͓͚̳͉͙͎d̴͚̱̮̗͍̩̻̰̣̫͉͈̞̲͉̫̞͔ẻͩͦ̃͌̿̐ͪͩ̌̇͂̆̑͐ͣ ҉̲͉͔͎̤̼̘͇̮̥̻̜̹̥͚̲̻̖s̶̗̻̫̼̠̳̗̺̤̗̳͈̪̮̗̝͇͈t̙͇͕̺̱̼̤̗̰̬̣͌ͬͧ͊́ͧͩ͌r͌̐̓̃ͥ̄ͤ͑̈ͬ͆ͬ͂̇̿̅ ҉̙̼̳̭̙͍̻̱̠͈̮̺̣̝̱̙̺͉ư̳͎̻͔̯̪̝͕͚̣̜̼̞͇̠̘̠̪c̨̫͙͙̬̰̰̫̐͋͊͑̌̾̉͆t͚̗͕̝̤̗͕̲̮̝̼̺͙͚̟͓̣̥͍ĭ͙̘̩̖͇͎̆̍̿̾ͤ̔̉̈̂̾̈ͭo̬̠̝͈̺̙̮̬̗̪̤͕͇͕̰̮͖͉̬n̙̪̤̝̹͖͖̻̬̹͙̞̗͓̞̭̜̠̟.\n\nTo make it easier for developers to emit events on primus it self we've added an\nsmall helper function that checks if the event you want to emit is reserved for\nPrimus only. This would be all `incoming::` and `outgoing::` prefixed events and\nthe events listed above. This method is called `<class>.reserved()` and it's\nimplemented on the `Spark`:\n\n```js\nprimus.on('connection', function connection(spark) {\n  spark.on('data', function (data) {\n    //\n    // Just imagine that we receive an array of arguments from the client which\n    // first argument is the name of the event that we need to emit and the\n    // second argument are the arguments for function.\n    //\n    if (spark.reserved(data.args[0])) return;\n\n    spark.emit.apply(spark, data.args[0]);\n  });\n});\n```\n\nBut also the client:\n\n```js\nvar primus = new Primus('http://example.bar');\n\nprimus.on('data', function (data) {\n  if (primus.reserved(data.args[0])) return;\n\n  primus.emit.apply(primus, data.args);\n});\n```\n\nAnd of course the `Primus` instance as well.\n\n### Heartbeats and latency\n\nHeartbeats are used in Primus to figure out if we still have an active, working\nand reliable connection with the server. These heartbeats are send from the\n**client** to the server.\n\nthe heartbeats will only be send when there is an idle connection, so there is\nvery little to no overhead at all. The main reason for this is that we already\nknow that the connection is alive when we receive data from the server.\n\nThe heartbeat package that we send over the connection is\n`primus::ping::<timestamp>`. The server will echo back the exact same package.\nThis allows Primus to also calculate the latency between messages by simply\ngetting the `<timestamp>` from echo and comparing it with the local time. This\nheartbeat is then stored in a `primus.latency` properly. The initial value of\nthe `primus.latency` is to the time it took to send an `open` package and to\nactually receive a confirmation that the connection has been opened.\n\n### Supported Real-time Frameworks\n\nThe following transformers/transports are supported in Primus:\n\n#### Engine.IO\n\nEngine.IO is the low level transport functionality of Socket.IO 1.0. It supports\nmultiple transports for creating a real-time connection. It uses transport\nupgrading instead of downgrading which makes it more resilient to blocking\nproxies and firewalls. To enable `engine.io` you need to install the `engine.io`\nmodule:\n\n```\nnpm install engine.io --save\n```\n\nAnd tell `Primus` that you want to use `engine.io` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: 'engine.io' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `engine.io-client`:\n\n```\nnpm install engine.io-client --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket\n  , socket = new Socket('url');\n```\n\n#### WebSockets\n\nIf you are targeting a high end audience or maybe just something for internal\nuses you can use a pure WebSocket server. This uses the `ws` WebSocket module\nwhich is known to be one if not the fastest WebSocket server available in\nNode.js and supports all protocol specifications. To use pure WebSockets you\nneed to install the `ws` module:\n\n```\nnpm install ws --save\n```\n\nAnd tell `Primus` that you want to use `WebSockets` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: 'websockets' });\n```\n\nThe `WebSockets` transformer comes with built-in client support and can be\naccessed using:\n\n```js\nvar Socket = primus.Socket\n  , socket = new Socket('url');\n```\n\n#### BrowserChannel\n\nBrowserChannel was the original technology that GMail used for their real-time\ncommunication. It's designed for same domain communication and does not use\nWebSockets. To use BrowserChannel you need to install the `browserchannel`\nmodule:\n\n```\nnpm install browserchannel --save\n```\n\nAnd tell `Primus` that you want to use `browserchannel` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: 'browserchannel' });\n```\n\nThe `browserchannel` transformer comes with built-in node client support and can be\naccessed using:\n\n```js\nvar Socket = primus.Socket\n  , socket = new Socket('url');\n```\n\nPlease note that you should use at least version `1.0.6` which contains support\nfor query strings.\n\n#### SockJS\n\nSockJS is a real-time server that focuses on cross-domain connections and does\nthis by using multiple transports. To use SockJS you need to install the\n`sockjs` module:\n\n```\nnpm install sockjs --save\n```\n\nAnd tell `Primus` that you want to use `sockjs` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: 'sockjs' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `sockjs-client-node` module:\n\n```\nnpm install sockjs-client-node --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket\n  , socket = new Socket('url');\n```\n\n#### Socket.IO\n\nThe Socket.IO transport was written against Socket.IO 0.9.x. It was one of the\nfirst real-time servers written on Node.js and is one of the most used modules\nin Node.js. It uses multiple transports to connect the server. To use Socket.IO\nyou need to install the `socket.io` module:\n\n```\nnpm install socket.io --save\n```\n\nAnd tell `Primus` that you want to use `socket.io` as transformer:\n\n```js\nvar primus = new Primus(server, { transformer: 'socket.io' });\n```\n\nIf you want to use the client interface inside of Node.js you also need to\ninstall the `socket.io-client`:\n\n```\nnpm install socket.io-client --save\n```\n\nAnd then you can access it from your server instance:\n\n```js\nvar Socket = primus.Socket\n  , socket = new Socket('url');\n```\n\nAs you can see from the examples above, it doesn't matter how you write the name\nof the transformer, we just `toLowerCase()` everything.\n\n### Transformer Inconsistencies\n\n- BrowserChannel does not give you access to the `remotePort` of the incoming\n  connection. So when you access `spark.address` the `port` property will be set\n  to `1337` by default.\n- SockJS does not support connections with query strings. You can still supply a\n  query string in the `new Primus('http://localhost:80?q=s')` but it will not be\n  accessible in the `spark.query` property as it will be an empty object.\n- BrowserChannel is the only transformer that does not support cross domain\n  connections.\n- SockJS and BrowserChannel are originally written in CoffeeScript which can\n  make it harder to debug when their internals are failing.\n- Engine.IO and SockJS do not ship their client-side library with their server\n  side component. We're bundling a snapshot of these libraries inside of Primus.\n  We will always be targeting the latest version of these transformers when we\n  bundle the library.\n- There are small bugs in Engine.IO that are causing our tests to fail. I've\n  submitted patches for these bugs, but they have been rejected for silly reasons.\n  The bug causes closed connections to say open. If you're experiencing this you\n  can apply this [patch](http://github.com/3rd-Eden/engine.io/commit/0cf81270e9d5700).\n\n### Plugins\n\nPrimus was built as a low level interface where you can build your applications\nupon. At it's core, it's nothing more than something that passes messages back\nand forth between the client and server. To make it easier for developers to\nswitch to Primus we've developed a simple but effective plugin system that\nallows you to extend Primus's functionality.\n\nPlugins are added on the server side in the form of an `Object`:\n\n```js\nprimus.use('name', {\n  server: function (primus, options) {},\n  client: function (primus, options) {},\n  library: 'client side library'\n});\n```\n\nOr you can pass the plugin `Object` directly into the constructor:\n\n```js\nvar primus = new Primus(server, { plugin: {\n  name: {\n    server: function (primus, options) {},\n    client: function (primus, options) {},\n    library: 'client side library'\n  }\n}})\n```\n\nThe server function is only executed on the server side and receives 2\narguments:\n\n1. A reference to the initialised Primus server.\n2. The options that were passed in the `new Primus(server, { options })`\n   constructor. So the plugin can be configured through the same interface.\n\nThe client receives the same arguments:\n\n1. A reference to the initialised Primus client.\n2. The options that were passed in the `new Primus(url, { options })`\n   constructor. So the plugin can be configured through the same interface.\n\nThe only thing you need to remember is that the client is stored in the library\nusing `toString()` so it cannot have any references outside the client's\nclosure. But luckily, there's a `library` property that will also be included on\nthe client side when it's specified. The `library` property should be an\nabsolute path to the library file.\n\n#### Extending the Spark / Socket\n\nThe server has a `.Spark` property that can be extended. This allows you to\neasily add new functionality to the socket. For example adding join room\nfunction would be as easy as:\n\n```js\nprimus.use('rooms', {\n  server: function (primus) {\n    var Spark = primus.Spark;\n\n    Spark.prototype.join = function () {\n      // implement room functionality.\n    };\n  }\n});\n```\n\n#### Transforming and intercepting messages\n\nIntercepting and transforming messages is something that a lot of plugins\nrequire. When your building an `EventEmitter` plugin or something else you\nprobably don't want the default `data` event to be emitted but your custom\nevent. There are 2 different types of messages that can be transformed:\n\n1. `incoming` These messages are being received by the server.\n2. `outgoing` These messages are being sent to the client.\n\nThe transformer is available on both the client and the server and share, like\nyou would have expected the same identical API. Adding a new transformer is\nrelatively straightforward:\n\n```js\nprimus.transform('incoming', function (packet) {\n  //\n  // The packet.data contains the actual message that either received or\n  // transformed.\n  //\n\n  // This would transform all incoming messages to foo;\n  packet.data = 'foo';\n\n  // If you are handling the message and want to prevent the `data` event from\n  // happening, simply `return false` at the end of your function. No new\n  // transformers will be called, and the event won't be emitted.\n});\n```\n\nThese transformations can easily be done in the plugins:\n\n```js\nprimus.use('name', {\n  server: function (primus) {\n    primus.transform('outgoing', function (packet) {\n      packet.data = 'foo';\n    });\n\n    primus.transform('incoming', function (packet) {\n      if (packet.data === 'foo') packet.data = 'bar';\n    });\n  },\n\n  client: function (primus) {\n    primus.transform('outgoing', function (packet) {\n      packet.data = 'foo';\n    });\n\n    primus.transform('incoming', function (packet) {\n      if (packet.data === 'foo') packet.data = 'bar';\n    });\n  }\n});\n```\n\n#### Community Plugins\n\nThese are plugins created by our amazing community. Do you have a module that\nyou want to have listed here? Make sure it has test suite and runs on [Travis CI].\nAfter that open a pull request where you added your module to this README.md and\nsee it be merged automatically.\n\n<dl>\n  <dt><a href=\"http://github.com/cayasso/primus-rooms\">primus-rooms</a></dt>\n  <dd>\n    A module that adds rooms capabilities to Primus. It's based on the rooms\n    implementation of Socket.IO.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/cayasso/primus-rooms\">\n      <img src=\"https://travis-ci.org/cayasso/primus-rooms.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-rooms\">\n      <img src=\"https://badge.fury.io/js/primus-rooms.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/cayasso/primus-multiplex\">primus-multiplex</a></dt>\n  <dd>\n    A module that adds multiplexing capabilities to Primus.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/cayasso/primus-multiplex\">\n      <img src=\"https://travis-ci.org/cayasso/primus-multiplex.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-multiplex\">\n      <img src=\"https://badge.fury.io/js/primus-multiplex.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/cayasso/primus-emitter\">primus-emitter</a></dt>\n  <dd>\n    A module that adds emitter capabilities to Primus.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/cayasso/primus-emitter\">\n      <img src=\"https://travis-ci.org/cayasso/primus-emitter.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-emitter\">\n      <img src=\"https://badge.fury.io/js/primus-emitter.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/neoziro/primus-cluster\">primus-cluster</a></dt>\n  <dd>\n    Scale Primus across multiple servers or with node cluster.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/neoziro/primus-cluster\">\n      <img src=\"https://travis-ci.org/neoziro/primus-cluster.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-cluster\">\n      <img src=\"https://badge.fury.io/js/primus-cluster.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/swissmanu/primus-responder\">primus-responder</a></dt>\n  <dd>\n    Client and server plugin that adds a request/response cycle to Primus.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/swissmanu/primus-responder\">\n      <img src=\"https://travis-ci.org/swissmanu/primus-responder.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-responder\">\n      <img src=\"https://badge.fury.io/js/primus-responder.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/mmalecki/primus-redis\">primus-redis</a></dt>\n  <dd>\n    primus-redis is a Redis store for Primus. It takes care of distributing \n    messages to other instances using Redis Pub/Sub.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/mmalecki/primus-redis\">\n      <img src=\"https://travis-ci.org/mmalecki/primus-redis.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-redis\">\n      <img src=\"https://badge.fury.io/js/primus-redis.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/mmalecki/primus-redis-rooms\">primus-redis-rooms</a></dt>\n  <dd>\n    primus-redis-rooms is a Redis store for Primus and primus-rooms.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/mmalecki/primus-redis-rooms\">\n      <img src=\"https://travis-ci.org/mmalecki/primus-redis-rooms.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-redis-rooms\">\n      <img src=\"https://badge.fury.io/js/primus-redis-rooms.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"http://github.com/cayasso/primus-resource\">primus-resource</a></dt>\n  <dd>\n    Define resources with auto-binded methods that can be called remotely on top of Primus. \n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/cayasso/primus-resource\">\n      <img src=\"https://travis-ci.org/cayasso/primus-resource.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-resource\">\n      <img src=\"https://badge.fury.io/js/primus-resource.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt>\n    <a href=\"https://github.com/latentflip/hapi_primus_sessions\">\n      hapi_primus_sessions\n    </a>\n  </dt>\n  <dd>\n    A hapi and primus plugin which extends primus' spark with a `getSession(cb)`\n    method which returns the current hapi session object.\n  </dd>\n  <dd>\n    <a href=\"http://badge.fury.io/js/hapi_primus_sessions\">\n      <img src=\"https://badge.fury.io/js/hapi_primus_sessions.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"https://github.com/zeMirco/primus-express-session\">primus-express-session</a></dt>\n  <dd>\n    Share a user session between Express and Primus.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/zeMirco/primus-express-session\">\n      <img src=\"https://travis-ci.org/zeMirco/primus-express-session.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/primus-express-session\">\n      <img src=\"https://badge.fury.io/js/primus-express-session.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n<dl>\n  <dt><a href=\"https://github.com/Shopetti/backbone.primus/\">backbone.primus</a></dt>\n  <dd>\n    Bind primus.io events to backbone models and collections.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/Shopetti/backbone.primus\">\n      <img src=\"https://travis-ci.org/Shopetti/backbone.primus.png?branch=master\" alt=\"Build Status\" />\n    </a>\n  </dd>\n</dl>\n\n\nIn addition to these community provided plugins, the Primus project also\nprovides the following plugins:\n\n\n<dl>\n  <dt><a href=\"http://github.com/primus/substream\">substream</a></dt>\n  <dd>\n    Substream is an opinionated but stream compatible connection multiplexer on\n    top of the Primus connections. These streams can be created without\n    pre-defining them on the server or client.\n  </dd>\n  <dd>\n    <a href=\"https://travis-ci.org/primus/substream\">\n      <img src=\"https://travis-ci.org/primus/substream.png?branch=master\" alt=\"Build Status\" />\n    </a>\n    <a href=\"http://badge.fury.io/js/substream\">\n      <img src=\"https://badge.fury.io/js/substream.png\" alt=\"NPM version\" />\n    </a>\n  </dd>\n</dl>\n\n[Travis CI]: https://travis-ci.org/\n\n### Example\n\nThere is a small example folder included in this repository which allows to\neasily play with the real-time connection. The code in the example is heavily\ncommented for your reading pleasure. The example requires some extra\ndependencies so don't forget to run `npm install .` in the folder. The example\ncan be run using `npm start` or if you want to customize the\nparsers/transformers you can use:\n\n```\nnode index.js --transformer <name> --parser <name> --port <number>\n```\n\nThe example is also hosted on [Nodejitsu] an can be accessed at:\n\nhttp://primus-example.nodejitsu.com/\n\nPlease note that the site can be down from time to time as it supports killing\nthe server to trigger reconnects. So you can see what happens when you restart\nyour server/application.\n\n[Nodejitsu]: https://www.nodejitsu.com/\n\n#### Community\n\nUsing Primus in production or created an awesome demo using the technology?\nWe've set up a special [wiki] page for it where you can show your awesome\ncreations or learn from demo and example applications how to use Primus.\nCheckout the wiki page out at:\n\nhttps://github.com/primus/primus/wiki/Production\n\n[wiki]: https://github.com/primus/primus/wiki\n\n### FAQ\n\n#### What is the best way to scale Primus\n\nScaling Primus is as simple as sticking it behind a load balancer that supports\n[sticky sessions](https://github.com/primus/primus/issues/147) and run multiple\nversions of your application. This is a vital feature that your load balancer\nneeds to support. This ensures that the incoming requests always go back to the\nsame server. If your load balancer does not support sticky sessions, get another\none. I highly recommend [HAProxy](http://haproxy.1wt.eu/). According to my own\ntesting it the fastest and best proxy available that supports WebSockets. See\nhttps://github.com/observing/balancerbattle for more detailed information.\n\n#### How do I use Primus with Express 3\n\nExpress 3's `express()` instance isn't a valid HTTP server. In order to make it\nwork with `Primus` and other real-time transformers you need to feed the instance\nto a real `http` server and supply this server. See example below:\n\n```js\n'use strict';\n\nvar express = require('express')\n  , Primus = require('primus')\n  , app = express();\n\n//\n// Do your express magic.\n//\n\nvar server = require('http').createServer(app)\n  , primus = new Primus(server, { options });\n\nserver.listen(port);\n```\n\n#### Is require.js supported\n\nRequire.js is supported to a certain degree. The `primus.js` core file should be\ncompatible with require.js but it could be that the transformer of your choosing\nisn't compatible with require.js. For example `engine.io` uses `component` which\nintroduces it's own `require` function that causes issues. In addition to that,\nthere are plugins which might use these modules that break require.js. The\ngeneral advice for this is to drop require.js in favour of plain script loading\nor use of browserify where possible. If you feel strong about require.js we accept\npull requests that improve this behaviour or helps us save guard against these\nissues.\n\n#### Can I send custom headers to the server\n\nIt is not possible to send custom headers from the client to the server. This is\nbecause these headers need to be set by the actual transports that the\ntransformers are using. The only transport that would support this would be AJAX\npolling. To send custom data to the server use a query string in your connection\nURL, as this is something that all transports support. The only noticeable\nexception for this case is SockJS as it doesn't allow query strings in the\nconnection URL.\n\n```js\nvar primus = new Primus('http://localhost:8080/?token=1&name=foo');\n```\n\n### Versioning\n\n#### History\n\nYou can discover the version history and change logs on the\n[Releases](https://github.com/primus/primus/releases) page\n\n#### Convention\n\nAll `0.x.x` releases should be considered unstable and not ready for production.\nThe version number is laid out as: `major.minor.patch` and tries to follow\nsemver as closely as possible but this is how we use our version numbering:\n\n<dl>\n  <dt>major</dt>\n  <dd>\n    <p>\n      A major and possible breaking change has been made in the primus core.\n      These changes are not backwards compatible with older versions.\n    </p>\n  </dd>\n  <dt>minor</dt>\n  <dd>\n    <p>\n      New features are added or a big change has happened with one of the\n      real-time libraries that we're supporting.\n    </p>\n  </dd>\n  <dt>patch</dt>\n  <dd>\n    <p>\n      A bug has been fixed, without any major internal and breaking changes.\n    </p>\n  </dd>\n</dl>\n\n#### Release cycle\n\nThere isn't a steady or monthly release cycle. We usually release a new \nversion when:\n\n1. A critical bug is discovered.\n2. There have been a lot of minor changes.\n3. A framework did an incompatible update.\n4. A new framework is added.\n5. People ask for it.\n\n### Other languages\n\nThese projects are maintained by our valuable community and allow you to use\nprimus in a different language than JavaScript:\n\n<dl>\n  <dt><a href=\"https://github.com/seegno/primus-objc\">primus-objc</a></dt>\n  <dd>\n    <a href=\"https://travis-ci.org/seegno/primus-objc\">\n      <img src=\"https://travis-ci.org/seegno/primus-objc.png\" alt=\"Build Status\" />\n    </a>\n  </dd>\n  <dd>\n    A client written in Objective-C for the Primus real-time framework with\n    initial support for web sockets (via SocketRocket) and socket.io (via\n    socket.IO-objc). Easily switch between different real-time Objective-C\n    frameworks without any code changes.\n  </dd>\n</dl>\n\nWant to have your project listed here? Add it using a pull-request!\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/primus/primus/issues"
  },
  "homepage": "https://github.com/primus/primus",
  "_id": "primus@2.0.4",
  "dist": {
    "shasum": "aca09a8593303a3392f33256f368047829331999"
  },
  "_from": "primus@",
  "_resolved": "https://registry.npmjs.org/primus/-/primus-2.0.4.tgz"
}
