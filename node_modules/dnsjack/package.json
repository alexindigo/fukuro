{
  "name": "dnsjack",
  "version": "0.1.0",
  "description": "A simple DNS proxy that lets you intercept domains and route them to whatever IP you decide",
  "keywords": [
    "dns",
    "proxy",
    "intercept",
    "debug"
  ],
  "dependencies": {
    "common": ">=0.1.0"
  },
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "main": "./index.js",
  "readme": "# DNSJack\n\nA simple DNS proxy that lets you intercept domains and route them to whatever IP you decide.\nIt's easy to use:\n\n``` js\nvar jack = require('dnsjack').createServer();\n\njack.route('www.google.com', '127.0.0.1'); // route all requests to www.google.com to localhost\njack.listen(); // it listens on the standard DNS port of 53 per default\n\n// now all requests to google.com should be routed localhost\nrequire('http').createServer(function(req, res) {\n\tres.writeHead(200);\n\tres.end('jack says hi!');\n}).listen(80);\n```\n\nYou probably need to run the above example with `sudo` as we need to listen to port `80` and `53`.\nNow change your local DNS server to `127.0.0.1` and visit `http://www.google.com` in your browser.\n\nDNSJack will forward all request that you don't route yourself to Google's DNS server or whatever DNS\nyou provide in `.createServer()`.\n\nYou can also use it to monitor your DNS resolutions which can be super useful for debugging:\n\n``` js\nvar jack = require('dnsjack').createServer();\n\njack.on('resolve', function(domain) {\n\tconsole.log('Someone is resolving', domain);\n});\njack.listen();\n```\n",
  "readmeFilename": "README.md",
  "_id": "dnsjack@0.1.0",
  "_from": "dnsjack"
}
