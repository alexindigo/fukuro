{
  "name": "deeply",
  "version": "0.1.0",
  "description": "Deeply merges properties of the provided objects, returns untangled copy (clone)",
  "main": "deeply.js",
  "scripts": {
    "test": "node ./test"
  },
  "ender": "./ender.js",
  "engines": {
    "node": ">= 0.6"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alexindigo/deeply.git"
  },
  "keywords": [
    "merge",
    "deep",
    "clone",
    "util",
    "browser",
    "client",
    "server",
    "ender"
  ],
  "author": {
    "name": "Alex Indigo",
    "email": "iam@alexindigo.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/alexindigo/deeply/issues"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "chrome/latest..canary",
      "firefox/latest..nightly",
      "safari/latest",
      "iphone/6..latest",
      "ipad/6..latest"
    ]
  },
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "readme": "# Deeply [![Build Status](https://travis-ci.org/alexindigo/deeply.png?branch=master)](https://travis-ci.org/alexindigo/deeply) [![Dependency Status](https://gemnasium.com/alexindigo/deeply.png)](https://gemnasium.com/alexindigo/deeply)\n\nJavascript (Node + Browser) library that deeply merges properties of the provided objects, returns untangled copy (clone).\n\n## Install\n\n### Node\n```\n$ npm install deeply\n```\n\n### Ender\n```\n$ ender add deeply --use=your_ender_file\n```\n\n## Usage\n\n### merge\n– Deeply merges two or more objects.\n\nNode:\n``` javascript\nvar merge = require('deeply');\n\nmerge({a: {a1: 1}}, {a: {a2: 2}}); // -> {a: {a1: 1, a2: 2}}\n```\n\nEnder:\n``` javascript\n$.merge({a: {a1: 1}}, {a: {a2: 2}}); // -> {a: {a1: 1, a2: 2}}\n```\n\n### clone\n– As degenerated case of merging one object on itself, it's possible to use deeply as deep clone function.\n\nNode:\n``` javascript\nvar merge = require('deeply')\n  , clone = merge\n  ;\n\nvar x = {a: {b: {c: 1}}};\nvar y = clone(x);\n\ny.a.b.c = 2;\n\nconsole.log(x.a.b.c); // -> 1\n```\n\nEnder:\n``` javascript\nvar clone = $.merge;\nvar x = {a: {b: {c: 1}}};\nvar y = clone(x);\n\ny.a.b.c = 2;\n\nconsole.log(x.a.b.c); // -> 1\n```\n\n### Arrays custom merging\n– By default array treated as primitive values and being replaced upon conflict, for more meaningful array merge strategy, provide custom reduce function as last argument.\n\nNode:\n``` javascript\nvar merge = require('deeply');\n\n// default behavior\n\nmerge({ a: { b: [0, 2, 4] }}, { a: {b: [1, 3, 5] }}); // -> { a: { b: [1, 3, 5] }}\n\n// custom merge function\n\nfunction customMerge(a, b)\n{\n  return (a||[]).concat(b);\n}\n\nmerge({ a: { b: [0, 2, 4] }}, { a: {b: [1, 3, 5] }}, customMerge); // -> { a: { b: [0, 2, 4, 1, 3, 5] }}\n```\n\nEnder:\n``` javascript\n\n// default behavior\n\n$.merge({ a: { b: [0, 2, 4] }}, { a: {b: [1, 3, 5] }}); // -> { a: { b: [1, 3, 5] }}\n\n// custom merge function\n\nfunction customMerge(a, b)\n{\n  return (a||[]).concat(b);\n}\n\n$.merge({ a: { b: [0, 2, 4] }}, { a: {b: [1, 3, 5] }}, customMerge); // -> { a: { b: [0, 2, 4, 1, 3, 5] }}\n\n```\n\nMore examples can be found in ```test/index.js```.\n\n## License\n\nDeeply is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/alexindigo/deeply",
  "_id": "deeply@0.1.0",
  "dist": {
    "shasum": "a4949a9e10ffa07a07473ecfcb17b2ccb683c146"
  },
  "_from": "deeply@~0.1.0",
  "_resolved": "https://registry.npmjs.org/deeply/-/deeply-0.1.0.tgz"
}
