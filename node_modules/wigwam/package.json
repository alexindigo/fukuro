{
  "name": "wigwam",
  "version": "0.1.1",
  "description": "A module for creating restful API servers and static file servers (with etags, caching, etc).",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alexindigo/node-wigwam.git"
  },
  "keywords": [
    "http",
    "web",
    "api",
    "rest",
    "sockets",
    "websockets",
    "primus",
    "static",
    "server"
  ],
  "author": {
    "name": "Alex Indigo",
    "email": "iam@alexindigo.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/alexindigo/node-wigwam/issues"
  },
  "devDependencies": {
    "tap": "~0.4.8",
    "ws": "~0.4.31"
  },
  "dependencies": {
    "mapleTree": "~0.5.1",
    "st": "~0.3.2",
    "primus": "~2.0.4",
    "deeply": "~0.1.0",
    "lodash": "~2.4.1"
  },
  "readme": "# Wigwam\n\nA module for creating restful API servers and static file servers (with etags, caching, etc).\n\nWeb server is like a house, some are small and tiny, some are big and fancy. And if you're goin gto live there alone\nor with small family of two-three people, you don't huge mansion with 10 rooms and 15 bathrooms,\nit will take all your time to maintain teh thing with no clear advantage.\nSame with the webservers, it's easy to install all-included frameworks like express,\nbut do you really need all of it's features all the time?\n\n\n## Install\n\n```\n$ npm install wigwam\n```\n\n## Examples\n\nAssume:\n\n```javascript\nvar http      = require('http')\n  , path      = require('path')\n\n  , Wigwam    = require('wigwam')\n\n  , publicDir = './public'\n\n  , wigwam\n  ;\n```\n\n\n### 1. Simplest, static files only, no api, no websockets\n\n```javascript\nwigwam = new Wigwam(http.createServer(), {path: publicDir}).listen(11337);\nconsole.log('Listening on 11337');\n```\n\n### 2. All in one\n\n```javascript\nWigwam(http.createServer(),\n{\n  // static files\n  static:\n  {\n    path: publicDir,\n    url : '/'\n  },\n  // api endpoints\n  api:\n  {\n    path: '/api/v0',\n    get:\n    {\n      'test/:test': function(params, callback)\n      {\n        // successful response\n        callback(null, {method: 'get'});\n      }\n    },\n    post:\n    {\n      'test': function(params, callback)\n      {\n        // successful response\n        callback(null, {method: 'post'});\n      },\n    }\n  },\n  // websocket events\n  websockets:\n  {\n    transformer: 'websockets',\n    events:\n    {\n      'connection': function(socket)\n      {\n        console.log('connected');\n      },\n      'data': function(socket, data)\n      {\n        socket.write({echo: data});\n      },\n      'error': function(err)\n      {\n        console.error('Something horrible has happened', err, err.message);\n      }\n    }\n  }\n}).listen(11338);\nconsole.log('Listening on 11338');\n```\n\n### 3. Step-by-step, Static + API + Websockets\n```javascript\n// Create server instance\nwigwam = new Wigwam(http.createServer());\n\n// Static files\nwigwam.static(\n{\n  path: publicDir\n});\n\n// API endpoints\nwigwam.api(\n{\n  path: '/api/v1',\n  get:\n  {\n    'test/:test': function(params, callback)\n    {\n      // unsuccessful response\n      callback({code: 500, error: 'for get'});\n    }\n  },\n  post:\n  {\n    'test': function(params, callback)\n    {\n      // parse POST parameters\n      this.parseRequestBody(function(err, data)\n      {\n        // unsuccessful response\n        callback({code: 500, error: 'for post'});\n      });\n    }\n  }\n});\n\n// Websocket events\nwigwam.websockets(\n{\n  transformer: 'websockets',\n  events:\n  {\n    'connection': function(socket)\n    {\n      console.log('connected to :11339');\n    },\n    'data': function(socket, data)\n    {\n      socket.write({echo: data, port: 11339});\n    }\n  }\n});\n\n// Start listening\nwigwam.listen(11339);\nconsole.log('Listening on 11339');\n```\n\n### 4. Verbose handlers\n```javascript\n// Start with server + settings\nwigwam = new Wigwam(http.createServer(),\n{\n  path: publicDir,\n  apiPath: '/api',\n  transformer: 'websockets'\n}).listen(11340);\nconsole.log('Listening on 11340');\n\n// GET endpoint\nwigwam.get('test/:test', function(params, callback)\n{\n  // successful response\n  callback(null, {parameter: params.test, method: 'get', port: 11340});\n});\n\n// POST endpoint\nwigwam.post('test', function(params, callback)\n{\n  // parse POST parameters\n  this.parseRequestBody(function(err, data)\n  {\n    // successful response\n    callback(null, {data: data, method: 'post', port: 11340});\n  });\n});\n\n// combined events handler\nwigwam.on('connection data', function(socket, data)\n{\n  if (data.connection)\n  {\n    console.log('connected to :11340');\n  }\n\n  socket.write({echo: data, port: 11340});\n});\n\n// Single event handler\nwigwam.on('disconnection', function(socket)\n{\n  console.log('bye, bye');\n});\n\n```\n\n## TODO\n\n- Tests\n- Better docs\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/alexindigo/node-wigwam",
  "_id": "wigwam@0.1.1",
  "dist": {
    "shasum": "13315175b090b607ab60f1817146158912ad0121"
  },
  "_from": "wigwam@0.1.1",
  "_resolved": "https://registry.npmjs.org/wigwam/-/wigwam-0.1.1.tgz"
}
